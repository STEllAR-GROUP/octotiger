#!groovy

//  Copyright (c) 2021-2022 Gregor Dai√ü
//
//  Distributed under the Boost Software License, Version 1.0. (See accompanying
//  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

def buildbadge = addEmbeddableBadgeConfiguration(id: "nodelevel", subject: "CPU / GPU Kernel Tests", status: "skipped")

pipeline {
    agent any

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: "28",
                numToKeepStr: "100",
                artifactDaysToKeepStr: "28",
                artifactNumToKeepStr: "100"
            )
        )
        disableConcurrentBuilds()
    }
    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN_OCTOTIGER')
        MAINTAINER_MAIL = credentials('OCTOTIGER_MAINTAINER_EMAIL')
    }
    stages {
        stage('checkout') {
            steps {
                script {
                    buildbadge.setStatus('running')
                }
                dir('octotiger') {
                    checkout scm
                    sh '''
                        cd octotiger
                        git submodule update --init --recursive
                        cd ..
                    '''
                }
            }
        }
        stage('build') {
            matrix {
                axes {
                    axis {
                        name 'build_spec'
                        values ' +cuda +kokkos cuda_arch=80 %gcc@11 ^hpx max_cpu_count=128 malloc=jemalloc ^silo~mpi ^kokkos@4.0.1 ;with-CC-with-cuda-with-kokkos;gcc/11 cuda/12',\
                               ' ~cuda +kokkos %gcc@11 ^hpx max_cpu_count=128 malloc=jemalloc ^silo~mpi^kokkos@4.0.1~cuda ;with-CC-without-cuda-with-kokkos;gcc/11 cuda/12',\
                               ' +cuda ~kokkos cuda_arch=80 ^hpx max_cpu_count=128 malloc=jemalloc ^silo~mpi%gcc@11 ;with-CC-with-cuda-without-kokkos;gcc/11 cuda/12',\
                               ' ~cuda ~kokkos %gcc@11 ^hpx max_cpu_count=128 malloc=jemalloc ^silo~mpi ;with-CC-without-cuda-without-kokkos;gcc/11 cuda/12',\
                               ' +cuda +kokkos cuda_arch=80 %clang@12 ^hpx max_cpu_count=128 ^silo~mpi ;with-CC-clang-with-cuda-with-kokkos;llvm/12 cuda/12',\
                               ' ~cuda +kokkos %clang@12^hpx max_cpu_count=128 malloc=jemalloc ^silo~mpi ;with-CC-clang-without-cuda-with-kokkos;llvm/12 cuda/12',\
                               ' +cuda ~kokkos cuda_arch=80 %clang@12 ^hpx max_cpu_count=128 ^silo~mpi ;with-CC-clang-with-cuda-without-kokkos;llvm/12 cuda/12',\
                               ' ~cuda ~kokkos %clang@12 ^hpx max_cpu_count=128 malloc=jemalloc ^silo~mpi ;with-CC-clang-without-cuda-without-kokkos;llvm/12 cuda/12'
                    }
                }
                stages {
                    stage('init') {
                        steps {
                            dir('octotiger') {
                                sh '''
                                spack_spec=$(echo "${build_spec}" | cut -d ";" -f 1)
                                build_description=$(echo "${build_spec}" | cut -d ";" -f 2)
                                github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                                curl --verbose\
                                    --request POST \
                                    --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                                    --header "Content-Type: application/json" \
                                    --header "authorization: Bearer ${github_token}" \
                                    --data "{
                                        \\"state\\": \\"pending\\",
                                        \\"context\\": \\"jenkins-${build_description}\\",
                                        \\"description\\": \\"Jenkins CI Job: ${build_description}\\",
                                        \\"target_url\\": \\"https://rostam.cct.lsu.edu/jenkins/job/Octo-Tiger%20Node-Level/job/$JOB_BASE_NAME/$BUILD_NUMBER/console\\"
                                    }"
                                '''
                            }
                        }
                    }
                    stage('build-and-test') {
                        steps {
                            dir('octotiger') {
                                sh '''
                                #!/bin/bash -l
                                set -x
                                spack_spec=$(echo "${build_spec}" | cut -d ";" -f 1)
                                build_description=$(echo "${build_spec}" | cut -d ";" -f 2)
                                required_modules=$(echo "${build_spec}" | cut -d ";" -f 3)
                                source ${HOME}/jenkins_spack_install/share/spack/setup-env.sh
                                cat ${HOME}/.spack/linux/compilers.yaml 
                                flock ${HOME}/.spack/linux/compilers.yaml sed -i 's/f77: null/f77: gfortran/' ${HOME}/.spack/linux/compilers.yaml
                                flock ${HOME}/.spack/linux/compilers.yaml sed -i 's/fc: null/fc: gfortran/' ${HOME}/.spack/linux/compilers.yaml
                                cd ..
                                rm -rf octotiger-${build_description}
                                cp -r octotiger octotiger-${build_description}
                                cd octotiger-${build_description}
                                srun -p cuda-A100 -N 1 -n 1 --time=300 bash -lc "\
                                  module load ${required_modules} && \
                                  spack compiler find && \
                                  spack external find && \
                                  spack external find cuda python bzip2 && \
                                  spack install --fresh octotiger@develop ${spack_spec} && \
                                  spack dev-build --fresh --until cmake --test=root octotiger@develop ${spack_spec} && \
                                  cd spack-build && \
                                  spack build-env --fresh --dump build-env.sh octotiger@develop ${spack_spec} -- && \
                                  source build-env.sh && \
                                  make -j32 && \
                                  ctest --output-on-failure "
                                '''
                            }
                        }
                    }
                }
                post {
                    success {
                        sh '''
                        build_description=$(echo "${build_spec}" | cut -d ";" -f 2)
                        github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                        curl --verbose\
                            --request POST \
                            --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                            --header "Content-Type: application/json" \
                            --header "authorization: Bearer ${github_token}" \
                            --data "{
                                \\"state\\": \\"success\\",
                                \\"context\\": \\"jenkins-${build_description}\\",
                                \\"description\\": \\"Jenkins CI Job: ${build_description}\\",
                                \\"target_url\\": \\"https://rostam.cct.lsu.edu/jenkins/job/Octo-Tiger%20Node-Level/job/$JOB_BASE_NAME/$BUILD_NUMBER/console\\"
                            }"
                        '''
                    }
                    failure {
                        sh '''
                        build_description=$(echo "${build_spec}" | cut -d ";" -f 2)
                        github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                        curl --verbose\
                            --request POST \
                            --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                            --header "Content-Type: application/json" \
                            --header "authorization: Bearer ${github_token}" \
                            --data "{
                                \\"state\\": \\"failure\\",
                                \\"context\\": \\"jenkins-${build_description}\\",
                                \\"description\\": \\"Jenkins CI Job: ${build_description}\\",
                                \\"target_url\\": \\"https://rostam.cct.lsu.edu/jenkins/job/Octo-Tiger%20Node-Level/job/$JOB_BASE_NAME/$BUILD_NUMBER/console\\"
                            }"
                        '''
                    }
                    aborted {
                        sh '''
                        build_description=$(echo "${build_spec}" | cut -d ";" -f 2)
                        github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                        curl --verbose\
                            --request POST \
                            --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                            --header "Content-Type: application/json" \
                            --header "authorization: Bearer ${github_token}" \
                            --data "{
                                \\"state\\": \\"error\\",
                                \\"context\\": \\"jenkins-${build_description}\\",
                                \\"description\\": \\"Jenkins CI Job: ${build_description}\\",
                                \\"target_url\\": \\"https://rostam.cct.lsu.edu/jenkins/job/Octo-Tiger%20Node-Level/job/$JOB_BASE_NAME/$BUILD_NUMBER/console\\"
                            }"
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                buildbadge.setStatus('success')
            }
        }
        failure {
            script {
                buildbadge.setStatus('failing')
            }
            sh '''
                echo "Build failed! Pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins Octo-Tiger Node-Level Tests: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} failed" "${MAINTAINER_MAIL}"
            '''
        }
        aborted {
            script {
                buildbadge.setStatus('aborted')
            }
            sh '''
                echo "Build aborted on pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins Octo-Tiger Node-Level Tests: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} aborted" "${MAINTAINER_MAIL}"
            '''
        }
    }
}
