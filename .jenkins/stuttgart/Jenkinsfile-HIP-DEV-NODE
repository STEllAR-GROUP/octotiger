#!groovy

//  Copyright (c) 2021-2022 Gregor Dai√ü
//
//  Distributed under the Boost Software License, Version 1.0. (See accompanying
//  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

def buildbadge = addEmbeddableBadgeConfiguration(id: "hip-devbuild", subject: "HIP Dev-Environment Tests", status: "skipped")

pipeline {
    agent { label 'pcsgs09' }

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: "28",
                numToKeepStr: "100",
                artifactDaysToKeepStr: "28",
                artifactNumToKeepStr: "100"
            )
        )
        disableConcurrentBuilds()
    }
    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN_OCTOTIGER')
        MAINTAINER_MAIL = credentials('OCTOTIGER_MAINTAINER_EMAIL')
    }
    stages {
        stage('init') {
            steps {
                script {
                    buildbadge.setStatus('running')
                }
                // notify github about test starting and send an email to whomever is in ${MAINTAINER_MAIL}
                dir('octotiger') {
                    sh '''
                        github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                        curl \
                            --request POST \
                            --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                            --header "Content-Type: application/json" \
                            --header "authorization: Bearer ${github_token}" \
                            --data "{
                                \\"state\\": \\"pending\\",
                                \\"context\\": \\"jenkins-HIP-DEV-NODE-TESTS\\",
                                \\"description\\": \\"Jenkins CI Job: jenkins-HIP-DEV-NODE-TESTS\\",
                                \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/job/Octo-Tiger%20DEV/job/${JOB_BASE_NAME}/${BUILD_NUMBER}/console\\"
                        }"
                    '''
                }
            }
        }
        stage('checkout') {
            steps {
                // Get buildscripts for this machine and the test-data
                dir('octotiger') {
                    sh '''
		    echo "Currently in $(pwd)"
                    rm -rf octotiger 
                    rm -rf OctoTigerBuildChain 
                    git clone https://github.com/STEllAR-GROUP/octotiger.git 
                    cd octotiger 
                    git checkout ${GIT_COMMIT} 
                    git submodule update --init --recursive 
                    cd - 
                    git clone https://github.com/STEllAR-GROUP/OctoTigerBuildChain && cd OctoTigerBuildChain/ 
                    git checkout jenkins-hip-devnode
                    mkdir src 
                    cp -r ../octotiger src/octotiger 
                    '''
                }
            }
        }
        stage('build') {
            steps {
                dir('octotiger') {
                    sh '''
		    export ROCM_PATH=/opt/rocm-4.3.1
		    export HIP_PATH=${ROCM_PATH}/hip
		    export PATH=${HIP_PATH}/bin:${ROCM_PATH}/bin:${PATH}
		    export LD_LIBRARY_PATH=${HIP_PATH}/lib:${ROCM_PATH}/lib:${LD_LIBRARY_PATH}
		    cd OctoTigerBuildChain
		    rm -rf build 
                    ./build-all.sh RelWithDebInfo with-CC-clang without-cuda without-mpi without-papi without-apex with-kokkos with-simd without-hpx-backend-multipole without-hpx-backend-monopole with-hpx-cuda-polling without-otf2
                    '''
                }
            }
        }
        stage('cpu test') {
            steps {
                dir('octotiger') {
                    sh '''
		    export ROCM_PATH=/opt/rocm-4.3.1
		    export HIP_PATH=${ROCM_PATH}/hip
		    export PATH=${HIP_PATH}/bin:${ROCM_PATH}/bin:${PATH}
		    export LD_LIBRARY_PATH=${HIP_PATH}/lib:${ROCM_PATH}/lib:${LD_LIBRARY_PATH}
		    cd OctoTigerBuildChain/build/octotiger/build
		    ctest --output-on-failure -R cpu
                    '''
                }
            }
        }
        stage('gpu test') {
            steps {
                dir('octotiger') {
                    sh '''
		    export ROCM_PATH=/opt/rocm-4.3.1
		    export HIP_PATH=${ROCM_PATH}/hip
		    export PATH=${HIP_PATH}/bin:${ROCM_PATH}/bin:${PATH}
		    export LD_LIBRARY_PATH=${HIP_PATH}/lib:${ROCM_PATH}/lib:${LD_LIBRARY_PATH}
		    cd OctoTigerBuildChain/build/octotiger/build
		    ctest --output-on-failure -R gpu
                    '''
                }
            }
        }
    }
    // notify github about test starting and send an email to whomever is in ${MAINTAINER_MAIL}
    post {
        success {
            script {
                buildbadge.setStatus('success')
            }
            sh '''
                github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl \
                    --request POST \
                    --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${github_token}" \
                    --data "{
                        \\"state\\": \\"success\\",
                        \\"context\\": \\"jenkins-HIP-DEV-NODE-TESTS\\",
                        \\"description\\": \\"Jenkins CI Job: jenkins-HIP-DEV-NODE-TESTS\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/job/Octo-Tiger%20DEV/job/${JOB_BASE_NAME}/${BUILD_NUMBER}/console\\"
                }"
            '''
        }
        failure {
            script {
                buildbadge.setStatus('failing')
            }
            sh '''
                github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl \
                    --request POST \
                    --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${github_token}" \
                    --data "{
                        \\"state\\": \\"failure\\",
                        \\"context\\": \\"jenkins-HIP-DEV-NODE-TESTS\\",
                        \\"description\\": \\"Jenkins CI Job: jenkins-HIP-DEV-NODE-TESTS\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/job/Octo-Tiger%20DEV/job/${JOB_BASE_NAME}/${BUILD_NUMBER}/console\\"
                }"
                echo "Build failed on pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins Octo-Tiger HIP DEV: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} failed" "${MAINTAINER_MAIL}"
            '''
        }
        aborted {
            script {
                buildbadge.setStatus('aborted')
            }
            sh '''
                github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                curl \
                    --request POST \
                    --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                    --header "Content-Type: application/json" \
                    --header "authorization: Bearer ${github_token}" \
                    --data "{
                        \\"state\\": \\"error\\",
                        \\"context\\": \\"jenkins-HIP-DEV-NODE-TESTS\\",
                        \\"description\\": \\"Jenkins CI Job: jenkins-HIP-DEV-NODE-TESTS\\",
                        \\"target_url\\": \\"https://simsgs.informatik.uni-stuttgart.de/jenkins/job/Octo-Tiger%20DEV/job/${JOB_BASE_NAME}/${BUILD_NUMBER}/console\\"
                }"
                echo "Build aborted on pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins Octo-Tiger HIP DEV: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} aborted" "${MAINTAINER_MAIL}"
            '''
        }
    }
}
